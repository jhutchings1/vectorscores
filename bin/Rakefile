require 'eslintrb/eslinttask'

task :default => [:test]
task :test => [:eslint_source, :eslint_build]

options = {
  'extends': 'eslint:recommended',
  rules: {
    # Best Practices
    'eqeqeq': 'error',

    # Stylistic Issues
    'comma-spacing': [
      'warn',
      { 'before': false, 'after': true }
    ],
    'linebreak-style': [
      'error',
      'unix'
    ],
    'no-unneeded-ternary': 'warn',
    'operator-linebreak': [
      'warn',
      'after'
    ],
    'semi': 'warn',
    'space-infix-ops': 'warn',
    'quotes': [
      'warn',
      'double'
    ],

    # Variables
    # 'no-undef': 'warn'
    # 'no-use-before-define': 'warn'
  },
  env: {
    'browser': true
  },
  globals: {
    'd3': false,
    'VS': false
  }
}

dirs = [
  'js/vectorscores',
  'js/vs/',
  'scores/'
  ]

paths = '{' + dirs.join(',') + '}**/*.js'

# Lint source files
Eslintrb::EslintTask.new :eslint_source do |t|
  ignored_files = []

  # Exclude .js files with frontmatter
  source_files = Dir[paths].reject do |file|
    first_line = File.open(file, &:readline)

    if first_line =~ /^---/
      ignored_files.push(file)
    end
  end

  puts ignored_files
  puts "Ignoring #{ignored_files.length} source files containing front matter"

  t.pattern = source_files
  t.options = options
end

# Lint built files with no options to catch parsing errors
Eslintrb::EslintTask.new :eslint_build do |t|
  t.pattern = '_site/' + paths
end
