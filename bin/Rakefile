require 'eslintrb/eslinttask'
require 'json'
require 'rubocop/rake_task'

task default: %i[test]
task test: %i[jekyll_build eslint rubocop]
task eslint: %i[eslint_frontmatter_source eslint_source eslint_build]

task :jekyll_build do
  sh 'bundle exec jekyll build'
end

eslint_options = lambda {
  eslint_file = File.read('.eslintrc.json')
  JSON.parse(eslint_file)
}.call

js_paths = lambda {
  dirs = [
    'js/vectorscores',
    'js/vs/',
    'scores/'
  ]

  '{' + dirs.join(',') + '}**/*.js'
}.call

frontmatter_source_files = []
tmp_frontmatter_source_files = []

# Make a directory for temp files if needed
FileUtils.mkdir_p('.tmp')

def write_tmp_file_wo_liquid(src, dest)
  File.open(dest, 'w') do |file|
    text = File.read(src)

    # comment out front matter
    text = text.gsub(/(^---\n(.|\n)*---)/, '/*\1*/')

    # comment out liquid tags
    text = text.gsub(/({%.*%}|{{.*}})/, '/*\1*/')

    file.puts(text)
  end
end

# Find source files with frontmatter
Dir[js_paths].each do |file|
  first_line = File.open(file, &:readline)

  next unless first_line =~ /^---/

  tmp_path = '.tmp/' + File.path(file)

  # Make a directory for temp file if needed
  FileUtils.mkdir_p(File.dirname(tmp_path))

  write_tmp_file_wo_liquid(file, tmp_path)

  frontmatter_source_files.push(file)
  tmp_frontmatter_source_files.push(tmp_path)
end

# Lint source files with front matter, from .tmp/
Eslintrb::EslintTask.new :eslint_frontmatter_source do |t|
  t.pattern = tmp_frontmatter_source_files
  t.options = eslint_options
end

# Lint source files, excluding those with front matter
Eslintrb::EslintTask.new :eslint_source do |t|
  source_files = Dir[js_paths].reject do |file|
    frontmatter_source_files.include?(file)
  end

  t.pattern = source_files
  t.options = eslint_options
end

# Lint built files with no options to catch parsing errors
Eslintrb::EslintTask.new :eslint_build do |t|
  t.pattern = '_site/' + js_paths
end

# Lint ruby files
RuboCop::RakeTask.new :rubocop do |t|
  t.options = ['--display-cop-names']
end
